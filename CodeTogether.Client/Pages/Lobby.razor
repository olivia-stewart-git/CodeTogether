@page "/lobby/{serverId:int}/{gameId:guid}"
@using Microsoft.AspNetCore.SignalR.Client
@using CodeTogether.Client.Services 
@using CodeTogether.Client.Integration
@implements IAsyncDisposable
@inject NavigationManager Navigation
@inject UserStateService user
@inject HttpClient http


<h2>Lobby</h2>
@if (!IsConnected) // Maybe should have a signalr base component wrapper to have this logic?
{
    <p>Establishing connection</p>
}
else if (lobbyState == null)
{
    <p>Waiting on first response</p>
}
else if (errorOccured)
{
    <div class="alert alert-danger" role="alert">
        @errorMessage
    </div>
}
else
{
    <div>In Lobby for game: "@lobbyState.Name"</div>
    <div id="options">
        @if (hasSentChange)
        {
            <p>Sending...</p>
        }
        else
        {
            <p> </p>
        }
        <span>
            Max Players:
            <button @onclick="() => ChangeMaxPlayers(-1)">-</button>
            <button @onclick="() => ChangeMaxPlayers(1)">+</button>
        </span>
        <br />
        <label for="privateSwitch">Private:</label>
        <input id="privateSwitch" type="checkbox" @onclick="TogglePrivate" checked="@lobbyState.Configuration.IsPrivate" />
        <br />
        <label for="waitSwitch">Wait for all players to finish:</label>
        <input id="waitSwitch" type="checkbox" @onclick="ToggleWaitForAll" checked="@lobbyState.Configuration.WaitForAllToFinish" />
        <br />
        <label for="questionSelect">Question:</label>
        @if (Questions == null)
        {
            <p>Loading Questions</p>
        }
        else
        {
            <select id="questionSelect" class="form-select" @bind="SelectedQuestion">
                @foreach (var question in Questions)
                {
                    <option value="@question.Id">@question.Name</option>
                }
            </select>
        }
        <button @onclick="SetRandomQuestion">Random Question</button>
    </div>
    <h4>Players @lobbyState.Players.Count() / @lobbyState.Configuration.MaxPlayers</h4>
    <ul>
        @foreach (var player in lobbyState.Players)
        {
            <li>@player</li>
        }
    </ul>
    <button @onclick="SendStartGame" disabled="@(lobbyState.Configuration.StartingAtUtc != null)">Start</button>
    <Timer CompletesAtUtc="@lobbyState.Configuration.StartingAtUtc" Callback="@GoToGame" />
}

@code {
    [Parameter]
    public required Guid gameId { get; set; }

    [Parameter]
    public required int serverId { get; set; }

    HubConnection? hubConnection;
    LobbyStateDTO? lobbyState;

    Guid? SelectedQuestion
    {
        get
        {
            return lobbyState?.Configuration.Question.Id;
        }
        set {
            Task.Run(() => SendLobbyConfiguration(new SetLobbyConfigurationDTO { QuestionId = value }));
        }
    }

    List<QuestionListQuestionDTO>? Questions;

    void SetRandomQuestion()
    {
        SelectedQuestion = Questions?[Random.Shared.Next(Questions.Count)].Id;
    }

    bool errorOccured;
    string errorMessage = string.Empty;

    bool hasSentChange;
    bool IsConnected => hubConnection?.State == HubConnectionState.Connected;

    protected override async Task OnInitializedAsync()
    {
        Questions = null;
        lobbyState = null;
        var currentUser = await user.GetUserName();
        if (currentUser == null)
        {
            errorOccured = true;
            errorMessage = "Could not find current user";
            return;
        }


        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/api/lobby-hub"))
            .Build();

        hubConnection.On<LobbyStateDTO>("StateHasBeenUpdated", async (state) =>
        {
            Console.WriteLine(state.Configuration.StartingAtUtc);
            lobbyState = state;
            hasSentChange = false;
            await InvokeAsync(StateHasChanged);
        });

        hubConnection.On("NotInGame", () =>
        {
            Console.WriteLine("Not in game");
            Navigation.NavigateTo("/");
        });

        await hubConnection.StartAsync();

        await hubConnection.SendAsync("RequestState", gameId);

        Questions = await http.GetFromJsonAsync<List<QuestionListQuestionDTO>>("/api/question/list");
    }

    async Task ChangeMaxPlayers(int by)
    {
        if (lobbyState != null)
        {
            lobbyState.Players.Any();
            var maxPlayersFloor = lobbyState.Players.Count();
            var maxPlayersCeiling = 4;
            var newMaxPlayers = Math.Clamp(lobbyState.Configuration.MaxPlayers + by, maxPlayersFloor, maxPlayersCeiling);
            if (newMaxPlayers != lobbyState.Configuration.MaxPlayers)
            {
                await SendLobbyConfiguration(new SetLobbyConfigurationDTO { MaxPlayers = newMaxPlayers });
            }
        }
    }

    async Task TogglePrivate()
    {
        if (lobbyState != null)
        {
            await SendLobbyConfiguration(new SetLobbyConfigurationDTO { IsPrivate = !lobbyState.Configuration.IsPrivate });
        }
    }

    async Task ToggleWaitForAll()
    {
        if (lobbyState != null)
        {
            await SendLobbyConfiguration(new SetLobbyConfigurationDTO { WaitForAllToFinish = !lobbyState.Configuration.WaitForAllToFinish});
        }
    }

    async Task SendStartGame()
    {
        await SendLobbyConfiguration(new SetLobbyConfigurationDTO { GoingToStart = true });
    }

    async Task SendLobbyConfiguration(SetLobbyConfigurationDTO config)
    {
        if (hubConnection != null)
        {
            hasSentChange = true;
            await hubConnection.SendAsync("UpdateState", config);
        }
    }

    void GoToGame()
    {
        Navigation.NavigateTo($"/game/{serverId}/{gameId}");
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection != null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}
