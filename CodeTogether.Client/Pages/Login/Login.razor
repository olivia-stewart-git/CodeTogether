@page "/login"
@using CodeTogether.Client.Integration.Authentication
@using CodeTogether.Client.Services 
@inject NavigationManager navigation
@inject UserStateService user

<div class="mx-auto" style="width: 400px;">
    <h1>Login</h1>

    <EditForm Model="@loginModel" OnValidSubmit="HandleLogin">
        <DataAnnotationsValidator/>
        <ValidationSummary/>

        <div class="form-group">
            <label for="username">Username:</label>
            <InputText id="username" class="form-control" placeholder="Email" @bind-Value="loginModel.Username"/>
        </div>

        <div class="form-group">
            <label for="password">Password:</label>
            <InputText id="password" type="password" class="form-control" placeholder="Password" @bind-Value="loginModel.Password"/>
        </div>

        <div class="btn-group" style="margin-top: 30px" role="group" aria-label="Basic example">
            <button type="submit" class="btn btn-primary">Login</button>
            <button class="btn btn-primary" @onclick="NavigateToRegister">Register</button>
            @if (awaitingResponse)
            {
                <div class="spinner-border" role="status">
                </div>
            }
        </div>

    </EditForm>

    @if (loginFailed)
    {
        <div class="alert alert-danger" role="alert">
            @message
        </div>
    }
</div>

@code {
    private bool loginFailed;
    private bool awaitingResponse;

    private string message = "Login failed.";
    private readonly LoginRequestDTO loginModel = new ();

    private async Task HandleLogin()
    {
        try
        {
            awaitingResponse = true;
            await user.LoginAsUser(loginModel);
            awaitingResponse = false;

            //navigation.NavigateTo("/");
        } 
        catch (AccountException ex)
        {
            loginFailed = true;
            awaitingResponse = false;
            message = $"Could not login: {ex.Message}";
        } 
        catch (Exception ex)
        {
            loginFailed = true;
            awaitingResponse = false;
            message = $"An error occurred: {ex.Message}";
        }
    }

    void NavigateToRegister()
    {
        navigation.NavigateTo("/register");
    }
}