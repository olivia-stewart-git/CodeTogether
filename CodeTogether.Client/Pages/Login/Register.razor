@page "/register"
@using CodeTogether.Client.Integration
@using CodeTogether.Client.Services; 
@using CodeTogether.Client.Integration.Authentication
@inject NavigationManager NavigationManager
@inject HttpClient Http
@inject UserStateService user

<h3>Register</h3>

<EditForm Model="@registration" OnValidSubmit="HandleRegistration">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="username">Username:</label>
        <InputText id="username" class="form-control" @bind-Value="registration.Username" />
    </div>

    <div class="form-group">
        <label for="password">Password:</label>
        <InputText id="password" type="password" class="form-control" @bind-Value="registration.Password" />
    </div>

    <div class="form-group">
        <label for="email">Email:</label>
        <InputText id="email" class="form-control" @bind-Value="registration.Email" />
    </div>

    <button type="submit" class="btn btn-primary">Register</button>
    
    @if (registrationFailed)
    {
        <p class="text-danger">@message</p>
    }
</EditForm>

<button class="btn btn-link" @onclick="NavigateToLogin">Already have an account? Login here.></button>
@code {

    private RegisterAccountDTO registration = new();
    private bool registrationFailed;
    private string message = "Registration failed.";

    private async Task HandleRegistration()
    {
        try
        {
            await user.RegisterUser(registration);
            var loginRequest = new LoginRequestDTO { Username = registration.Username, Password = registration.Password };
            await user.LoginAsUser(loginRequest);
            NavigationManager.NavigateTo("/");
        }
        catch (AccountException ex)
        {
            registrationFailed = true;
            message = $"Failed to create account: {ex.Message}";
        }
    }

    void NavigateToLogin()
    {
        NavigationManager.NavigateTo("account/login");
    }
}
