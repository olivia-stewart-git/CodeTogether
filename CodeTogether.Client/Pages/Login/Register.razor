@page "/account/register"
@using CodeTogether.Client.Integration
@using CodeTogether.Client.Integration.Authentication
@inject NavigationManager NavigationManager
@inject HttpClient Http

<h3>Register</h3>

<EditForm Model="@registration" OnValidSubmit="HandleRegistration">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="username">Username:</label>
        <InputText id="username" class="form-control" @bind-Value="registration.Username" />
    </div>

    <div class="form-group">
        <label for="password">Password:</label>
        <InputText id="password" type="password" class="form-control" @bind-Value="registration.Password" />
    </div>

    <div class="form-group">
        <label for="email">Email:</label>
        <InputText id="email" class="form-control" @bind-Value="registration.Email" />
    </div>

    <button type="submit" class="btn btn-primary">Register</button>
    
    @if (registrationFailed)
    {
        <p class="text-danger">@message</p>
    }
</EditForm>

<button class="btn btn-link" @onclick="NavigateToLogin">Already have an account? Login here.></button>
@code {

    private RegisterAccountDTO registration = new();
    private bool registrationFailed;
    private string message = "Registration failed.";

    private async Task HandleRegistration()
    {
        var response = await Http.PostAsJsonAsync("/api/account/register", registration);

        if (!response.IsSuccessStatusCode)
        {
            message = response.ReasonPhrase + await response.Content.ReadAsStringAsync();
            registrationFailed = true;
            return;
        }

        var registrationResponse = await response.Content.ReadFromJsonAsync<RegistrationRequestResponseDTO>();
        if (registrationResponse.State == RegistrationState.Success)
        {
            // TODO: authenticate automatically
            NavigationManager.NavigateTo("account/login");
        }
        else
        {
            message = registrationResponse.Message;
            registrationFailed = true;
        }
    }

    void NavigateToLogin()
    {
        NavigationManager.NavigateTo("account/login");
    }
}
