@page "/game/{ServerId:int}/{GameId:guid}"
@using CodeTogether.Client.Integration.Execution
@using CodeTogether.Client.Components.Execution;
@using Microsoft.AspNetCore.SignalR.Client
@using GaelJ.BlazorCodeMirror6
@using GaelJ.BlazorCodeMirror6.Models
@using Timer = System.Timers.Timer
@inject NavigationManager Navigation
@inject HttpClient Http

<div class="container-fluid row border">
    <div class="col">
        <div class="row" style="flex-direction: row-reverse">
            <button class="position-absolute w-auto" style="translate: -12px; z-index: 1">Settings</button>
            <CodeMirror6Wrapper IsWASM
                                @bind-Doc="@Code"
                                Placeholder="Enter your code..."
                                TabSize="4"
                                IndentationUnit="4"
                                Theme="@ThemeMirrorTheme.VSCode"
                                Language="CodeMirrorLanguage.Csharp"
                                Setup="@setup"
                                Editable
                                ReadOnly="false"
                                LineWrapping="false"
                                MaxHeight="70vh" />
        </div>
        <div class="row">
            <button class="btn btn-primary btn-lg" @onclick="Submit">Submit</button>
            @if (submitting)
            {
                <div class="spinner-border m-5" role="status"></div>
            }
        </div>
        <div class="row">
            @if(submissionResult != null)
            {

            }
        </div>
    </div>

    <div class="col">
        <div class="row">
            Timer
        </div>
        <div class="row">
            @if (questionDto is not null)
            {
                <QuestionView Question="@questionDto" />
            }
            else
            {
                <p>Loading Question...</p>
            }
        </div>
    </div>

    <div class="col">
        @foreach (var codeContents in TheirCode.Values)
        {
            var maxHeight = $"calc(70vh / {TheirCode.Count})";
            <div class="row">
                <CodeMirror6Wrapper IsWASM
                                    @bind-Doc="@codeContents.content"
                                    TabSize="4"
                                    Theme="@ThemeMirrorTheme.VSCode"
                                    Language="CodeMirrorLanguage.Csharp"
                                    ReadOnly="true"
                                    Editable="false"
                                    LineWrapping="true"
                                    MaxHeight="@maxHeight" />
            </div>
        }
    </div>
</div>

@code {

    [Parameter]
    public required Guid GameId { get; set; }

    [Parameter]
    public required int ServerId { get; set; }

    private string Code { get; set; } = string.Empty;
    QuestionDTO? questionDto;

    private readonly CodeMirrorSetup setup = new()
    {
        BindMode = DocumentBindMode.OnInput
    };

    class CodeContents
    {
        public required string content;
    }

    private Dictionary<Guid, CodeContents> TheirCode { get; set; } = new() {{ Guid.Empty, new CodeContents { content = string.Empty }}};

    private HubConnection? hubConnection;

    private readonly Timer sendCodeTimer = new(2000);

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder().WithUrl(Navigation.ToAbsoluteUri("/gamehub")).Build();

        hubConnection.On<string>("SetState", theirCode =>
        {
            TheirCode[Guid.Empty].content = theirCode;
            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();

        sendCodeTimer.Elapsed += async (_, _) =>
        {
            await SendCode();
        };
        sendCodeTimer.Enabled = true;

        await LoadNextQuestion();
    }

    async Task LoadNextQuestion()
    {
        var questionResponse = await Http.GetFromJsonAsync<QuestionDTO>($"api/question/get/{GameId}");
        if (questionResponse is not null)
        {
            LoadQuestion(questionResponse);
        }
    }

    void LoadQuestion(QuestionDTO question)
    {
        Code = question.ScaffoldCode;
        questionDto = question;
    }

    private async Task SendCode()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("SendMessage", Code);
        }
    }

    bool submitting;
    ExecutionResponseDTO? submissionResult;
    async Task Submit()
    {
        if (questionDto == null)
        {
            return;
        }
        if (submitting)
        {
            return;
        }
        submitting = true;

        try
        {
            var request = new ExecutionRequestDTO
            {
                RawCode = Code,
                GameId = GameId,
                QuestionId = questionDto.Id
            };
            var response = await Http.PostAsJsonAsync<ExecutionRequestDTO>("api/execution/execute", request);
            response.EnsureSuccessStatusCode();
            submissionResult = await response.Content.ReadFromJsonAsync<ExecutionResponseDTO>();
        }
        finally
        {
            submitting = false;
        }
    }
}