@page "/game/{ServerId:int}/{GameId:guid}/{PlayerCount:int}"
@*todo: be able to copy urls to join a game*@
@using Microsoft.AspNetCore.SignalR.Client
@using GaelJ.BlazorCodeMirror6
@using GaelJ.BlazorCodeMirror6.Models
@using Timer = System.Timers.Timer
@inject NavigationManager Navigation

<h3>Game</h3>
<p>Using server @ServerId.ToString() for game @GameId.ToString() with @PlayerCount.ToString() players</p>

<div class="container border">
    <div class="row text-center fw-bold">
        <div class="col">
            Your Code
        </div>
        
        <div class="col">
            Their Code
        </div>
    </div>
    
    <div class="row">
        <div class="col">
            <div class="row">
                <CodeMirror6Wrapper
                    IsWASM
                    @bind-Doc="@Code"
                    Placeholder="Enter your code..."
                    TabSize="4"
                    IndentationUnit="4"
                    Theme="@ThemeMirrorTheme.VSCode"
                    Language="CodeMirrorLanguage.Csharp"
                    Setup="@setup"
                    Editable
                    ReadOnly="false"
                    LineWrapping="false"
                    MaxHeight="70vh"/>
                <button>Run</button>
            </div>
            <div class="row">
                Run output
            </div>
        </div>
        
        <div class="col">
            @foreach (var codeContents in TheirCode)
            {
                <div class="row">
                    <CodeMirror6Wrapper
                        IsWASM
                        @bind-Doc="@codeContents.content"
                        TabSize="4"
                        Theme="@ThemeMirrorTheme.VSCode"
                        Language="CodeMirrorLanguage.Csharp"
                        ReadOnly="true"
                        Editable="false"
                        LineWrapping="true"/>
                </div>
            }
        </div>
    </div>
</div>

@code {
        [Parameter]
        public required Guid GameId { get; set; }

        [Parameter]
        public required int ServerId { get; set; }

        [Parameter]
        public required int PlayerCount { get; set; } // required for page layout

    private string Code { get; set; } = string.Empty;

    private readonly CodeMirrorSetup setup = new()
    {
        BindMode = DocumentBindMode.OnInput
    };

    class CodeContents
    {
        public required string content;
    }

    private List<CodeContents> TheirCode { get; set; } = new List<CodeContents>() { new CodeContents { content = "" } };

    private HubConnection? hubConnection;

    private readonly Timer sendCodeTimer = new(2000);

    protected override async Task OnInitializedAsync()
    {
        
        hubConnection = new HubConnectionBuilder().WithUrl(Navigation.ToAbsoluteUri("/gamehub")).Build();

        hubConnection.On<string>("SetState", theirCode =>
        {
            TheirCode[0].content = theirCode;
            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();

        sendCodeTimer.Elapsed += async (_, _) =>
        {
            await SendCode();
        };
        sendCodeTimer.Enabled = true;
    }

    private async Task SendCode()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("SendMessage", Code);
        }
    }
}