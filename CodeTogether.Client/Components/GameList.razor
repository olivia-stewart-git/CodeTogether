@inject HttpClient http
@inject NavigationManager navigation 
@using CodeTogether.Client.Integration
@using System.Text.Json


<h3>Game List</h3>
<button @onclick="UpdateGameList">Refresh Now</button>
<TimedProgressBar StartedAt="@lastPoll" CompletesAt="@nextPoll"/>
<table class="table">
    <thead>
        <tr>
            <th>Name</th>
            <th>Players #</th>
            <th>Created At</th>
            <th>In Game</th>
        </tr>
    </thead>
    @if (games == null)
    {
        <tbody>Loading...</tbody>
    }
    else
    {
        <tbody>
            @foreach (GameListGameDTO game in games)
            {
                <tr @onclick="() => JoinGame(game)" class="@GetRowCssClass(game)">
                    <td>@game.Name</td>
                    <td>@game.NumPlayers</td>
                    <td>@game.CreatedAt</td>
                    <td>@game.Playing</td>
                </tr>
            }
        </tbody>
    }
</table>


@code {
    readonly TimeSpan pollInterval = TimeSpan.FromSeconds(10);

    List<GameListGameDTO>? games = null;
    DateTime lastPoll;
    DateTime nextPoll;

    protected override void OnInitialized()
    {
        Task.Run(PollGameList);
    }

    string GetRowCssClass(GameListGameDTO game) => game.Playing ? "" : "joinableRow";

    async Task PollGameList()
    {
        while (true) // TODO: does this need a cancellation token to stop when the component is unloaded/disposed?
        {
            StateHasChanged();
            await UpdateGameList();
            await Task.Delay(pollInterval);
        }
    }

    async Task UpdateGameList()
    {
        lastPoll = DateTime.Now;
        nextPoll = lastPoll + pollInterval;
        // Clear list, this is not nessesary but I think gives more feedback that the game list has updated
        games = null;
        StateHasChanged();
        var responseString = await http.GetStringAsync("api/game/list");
        games = JsonSerializer.Deserialize<List<GameListGameDTO>>(responseString, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
        StateHasChanged();
    }

    async Task JoinGame(GameListGameDTO game)
    {
        await GameJoiner.JoinAndNavigateToGame(http, navigation, game.Id);
    }
}
